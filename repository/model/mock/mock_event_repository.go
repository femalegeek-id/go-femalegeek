// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/model/event.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "femalegeek/repository/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockEventRepository) FindByID(ctx context.Context, id int64) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEventRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEventRepository)(nil).FindByID), ctx, id)
}

// MockEventUsecase is a mock of EventUsecase interface.
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase.
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance.
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockEventUsecase) FindByID(ctx context.Context, id int64) (*model.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEventUsecaseMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEventUsecase)(nil).FindByID), ctx, id)
}
